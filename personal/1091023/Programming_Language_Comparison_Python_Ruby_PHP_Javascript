<프로그래밍 언어 비교>

*Python의 특징
'python은 인터프리트 언어고 c언어는 컴파일 언어다'라는 것이 가장 큰 태생적 차이점이다. c언어는 컴파일 조차도 못하면 컴파일러에서 뱉어 내는 에러 메세지로 버그를 잡아야 하지만 인터프리트 언어는 입력즉시 실행이 되거나 에러를 발생하므로 실행은 곧 디버깅이며, 이로 인해서 개발 시간도 단축이 되어진다. 그리고 고수준 언어 이므로 타입을 자동 인식하여 사용하므로 변수를 신경쓰지 안하도 된다. Python은 GUI 데모를 볼때 mfc에 비해서 코딩이 확실히 간단하고 라인도 줄어든다. 코드를 들여다 보는데도 바로 이해가 될 정도로 바로바로 눈에 들어오는 단순함이 있다. python은 또한 제조업체의 기술에 대한 라이센스 비용이나 의존성이 없고, m2m을 위한 내장형 맞춤형 모듈이다. 낮은 전력 프로세서에서 효율적으로 작동한다. 즉 낮은 전력을 소모 한다. 모듈의 전체 비용 또한 감소하였다. 그리고 모든 텔릿 GPS 제품에 사용이 가능하다.

*Ruby(on Rails)의 특징
웹 개발 환경에는 다양한 종류의 프레임 워크가 있는데그 중 루비 기반의 Ruby on Rails 프레임워크가 두 각을 나타낸다. Ruby on Rails는 개발의 편의성과 생산성 높은 개발을 가능하게 해주기 때문에 새롭게 각광을 받고 있으며 많은 커뮤니티에서 개발/연구가 진행되고 있다. 많은 개발자들에 의해 개발과 관련된 문서가 공개되어 있어서 개발방법 습득에 도움을 주고 있다. 루비(Ruby)의 장점은 빠른 속도와 배우기 쉽다는 인터프리팅 스크립트 언어라는 것입니다. 매우 간결한 코딩으로 쉽게 프로그램을 작성하기 때문에 높은 생산성을 가진 언어이다. 바로 Ruby on Rails는 이러한 Ruby(루비)의 장점을 가져운 MVC 기반의 오픈소스 웹 어플리케이션 프레임 워크이다. MVC패턴은 Model, View, Controller 부분으로 역할을 나누어서 처리합니다. Model은 Active Record에서 담당하고, View는 Action View에서, 마지막 Controller는 Acion Controller에서 담당합니다. 사용자가 웹브라우저를 통해 웹사이트에 정보를 요청하면 Controller에서 해당 요청에 대해 정의된 스키마에 따라 모델 모듈로 부터 정보를 주고 받고, View 모듈에서 그 처리결과를 사용자게 보여주게 됩니다. 레일즈 프레임 워크의 또 다른 장점은 바로 생산성이 높다는 것입니다. 예를 들어 다른 닷넷 프레임워크나 자바의 경우 객체와 데이터베이스 간의 관계 설정시 여러가지 설정 코드를 작성해야 하지만 레일즈의 경우 작명 규칙을 따르기만 하면 해당 Relationship을 자동으로 설정해주기 때문에 코드생산 비용을 줄일 수 있습니다.

*PHP의 특징
PHP는 Professional Hypertext Preprocessor의 첫 글자를 따서 이름 붙여진 오픈소스 스크립트 언어이다. 1994년 Rasmus Lerdorf에 의해 개발된 언어이며, 개인 홈페이지 제작 용도로 사용 되다 현재는 리눅스나 유닉스, 윈도우를 비롯한 대부분의 서버 플랫폼에서 웹 개잘용으로 자주 사용되고 있는 프로그램 언어중에 하나이다. PHP 스크립트 코드는 ASP나 JSP와 같은 다른 스크립트 언어처럼 HTML 태그와 함께 사용되며, '<?', '?>' 태그에 쌓여 HTML 태그와 구분한다. 그리고 이 코드는 PHP 해석 엔진(PHP Parser)에 의해 따로 처리된다. 위에서 말한 것과 같이 HTML 문서 태그 안에 포함되어 있다고 하여 "HTML_Embedded scripting lauguage"라는 말로 표한하기도 하며 코도는 PHP Parser에 의해 처리되므로 클라이언트(Web Browser)가 아닌 서버(Web Server)쪽에서 처리 된다는 의미에서 "Server-Side scripting language"라고 표현한다. PHP의 장점은 C와 Java의 특징을 수용하면서도 불필요하고 복잡한 개념은 제거한 언어이기때문에 쉽게 배울 수 있다는 것이 있다. 또한 대부분의 서버 플랫폼을 지원하고 있다. 절차지향 방식과 객체지향 방식의 프로그래밍을 모두 지원한다. 그리고 다양한 데이터베이스를 지원한다. 마지막으로 다양한 XML 문서처리 기능을 제공한다.

*Javascript의 특징
Java의 주된 특징은 기존의 C/C++ 언어의 문접을 기본적으로 따르고, C/C++언어가 갖는 전처리기, 포인터, 포인터 연산, 다중 상속, 연산자 중첩(Overloading) 등 복잡하고 이해하기 난해한 특성들을 제거함으로써 기존의 프로그램 개발자들이 쉽고 간단하게 프로그램을 개발할 수 있도록 한다. Java는 C++와는 달리 처음부터 객체지향 개념을 기반으로 하여 설계되었고, 객체지향 언어가 제공해 주어야 하는 추상화(Abstraction), 상속(Inheritance), 그리고 다형성(Polymorphism)등과 같은 특성들을 모두 완벽하게 제공해 주고 있습니다. 또한 자바의 이러한 객체지향적 특성은 분산 환경, 클라이언트/서버 기반 시스템이 갖는 요구사항도 만족시켜줄 수 있다. Java는 컴파일 시에 에러 검사를 철자히게 하고, 실행 시에 발생할 수 있는 에러에 대해서도 실행 시에 철저하게 검사를 수행함으로써 신뢰도가 높은 프로그램을 작성할 수 있도록 해줍니다. 또한 C/C++ 프로그램 개발자들을 가장 혼란스럽게하고, 프로그램의 치명적인 오류를 발생시킬수 있는 포인터 및 포인터 연산을 자바에서는 사용하지 않게 함으로써, 포인터를 사용함으로써 프로그래머가 범할 수 있는 오류를 없앴다는 것이다. Java는 분산환경에 작동하도록 설계 되었다. 그러나 자바는 자바 언어와 자바 런타임 시스템 내에 보안 기능이 내재되어 있기 때문에 보안성이 있는 프로그램을 개발할 수 있도록 해 줍니다. 이러한 특성은 자바 프로그램이 네트윅 환경에서 바이러스 등과 같은 프로그램이 파일 시스템을 파괴하려는 것을 막을 수 있도록 해 줍니다. Java에서는 인터프-리터가 런타임 환경을 검사할 필요 없이 실행될 수 있도록 구성하였게 때문에 뛰어난 성능을 제공해 줍니다. 쓰레기 수집기 즉 메로리 관리자는 자동으로 낮은 우선순위의 백그라운드 스레드로 실행되어 메모리가 필요할 때에만 동작하도록 함으로써, 자바 가상머신에게 무리를 주지 않으면서 보다 나은 수행 성능을 제공할 수 있도록 해줍니다. 또한 방대한 양의 계산을 수행하는 프로그램은 계산이 많은 부분을 본래 플랫폼에 해당하는 기계어 코드로 재작성하여 자바 프로그램과 인터페이스 할 수 있도록 해줍니다. Java 언어로 작성된 자바 프로그램을 중간언어 형태인 자바 바이트코드로 컴파일하고, 이렇게 생성된 자바 바이트코드를 자바 인터프리터가 해석함으로써, 자바 인터프리터와 런타임 시스템이 이식된 모든 플랫폼에서 자바 바이트코드를 직접 실행할수 있습니다. Java의 다중 스레드 기능은 동시에 많은 스레드를 실행시킬 수 있는 프로그램을 만들 수 있도록 해줍니다. 자바는 동기화 메소드들을 기본적으로 키워드로 제공함으로써, 자바 언어 수준에서 다중 스레드를 지원해줍니다. Java는 서로 다른 이종의 네트워크 환경에서 분산 되어 실행될 수 있도록 설계되었습니다. 이와 같은 환경에서는 응용 프로그램들이 다양한 하드웨어 아키텍쳐 위에서 실행될 수 있어야만 합니다.
