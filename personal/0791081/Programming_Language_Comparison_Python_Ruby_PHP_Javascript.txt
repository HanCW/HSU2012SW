Python 의 장점
Python은 타 컴퓨터 언어보다 간결하며 깔끔한 문법 체계를 가진다. 
기본적인 프로그래밍에 대한 이해만 있는 정도인 나도 소스를 보고 어느 정도 이해할 수 있었다.
Python은  C++, Java, C,에 비해 평균 1/3이하의 개발 시간이 들고 라인 수도 C++, Java, C, 에 비해 대략 1/3이고, 
Java의 절반 정도의 메모리 소모, 전체 수행 속도는 C나 C++보다는 느리지만 Java보다 좀 더 빠르다.
내장 자료형이 뛰어나다. Python은 기본적으로 높은 수준의 자료형을 기본적으로 채택하고 있다. 
거기에 모든 자료형이 객체로 설계되어 있어 체계적인 프로그래밍이 가능하다.
Python은 한글이나 한자와 같은 2바이트 문자를 지원하지 않았다. 그러나 파이썬 2.0 에서 유니코드 문자형을 새로 도입하여 여러 나라의 언어를 다룰 수 있게 되었다.
다른 스크립트 언어와 달리, 파이썬에서는 문자의 인코딩과 내부 유니코드 표현을 명확하게 구별한다.  
Python 2.4 에서는, 한중일 코덱이 표준으로 포함되었으므로, 이제 한글 처리에 문제는 거의 없다. 
Python은 인터프리터. 인터프리터(interpreter)는 소스 코드를 다 작성한 후에 기계어로 번역하여 실행하는 개념으로 
소스 코드를 한 줄 작성 할때마다 기계어로 번역하여 실행하는 환경을 의미한다. 
즉 한 줄을 코딩하면 그것에 대한 결과를 바로 볼 수 있어 좀 더 쉬운 프로그래밍과 디버깅이 가능하다.


Ruby 의 장점
루비는 마츠모토 유키히로라는 일본 사람이 개발했다. 
유키히로는 쉽게 쓸 수 있으면서 객체지향적인 언어를 만드는 걸 목표로 했고, 그래서 탄생한 것이 바로 루비(Ruby)이다.
루비의 개발자 마츠모토 유키히로는 루비가 스트레스가 없는 쉬운 프로그래밍이고, 
루비는 우리의 삶을 반영해야 하며, 프로그래밍 언어는 (컴퓨터가 아닌) 인간 중심으로 설계되어야 한다고 했다.
루비는 다양한 확장 라이브러리도 포함해 다른 스크립트 언어가 갖고 있는 대부분의 기능이 포함되어 있어 잘 활용한다면 쉽고, 빠르게 개발을 진행할 수 있다.
이러한 특징 때문에 반복되는 작업을 자동화하는 간단한 프로그램이나, 본격적인 개발 전에 프로토타입을 만들어보는 용으로 사용하면 좋을 것 같다.
루비는 이식성이 매우 높다. 대부분 GNU 리눅스에서 개발되었지만 유닉스, 맥 OS X, 윈도 95/98/Me/NT/2000/XP, 도스, BeOS, OS/2 등에서 동작한다.


PHP 의 장점
PHP는 아무런 제약이 없이 누구든지 사용할 수 있는 프리웨어 프로그램이다. 
PHP는 텍스트, 특히 HTML의 처리에 강점을 가지고 있다. 
URL의 파싱이나 폼 처리, 정규 표현식 등이 그 한 예이다. 또한 다양한 데이터베이스를 지원하므로 데이터베이스와 사용자간의 다리 역할도 잘 수행한다
자바나 C 언어에서 접근하려면 여러 Include 등을 통해야 했던 작업들이 '그냥 존재' 한다. 
그래서 '그냥 적어 놓기만' 하면 작동을 한다. 즉 작성 코드의 양이 현저히 적다는 것이다. 
따라서 직관적인 코드작성을 가능하게 하고 이것은 소스코드를 '절차적 프로그램 코드'에 가깝도록 만든다
처리속도가 상당히 빠르다(4.0 버전부터는 PHP의 파싱 엔진을 Zend로 분리하여 전적으로 담당하기 때문에 
부하를 상당히 감소시키는 동시에 처리속도를 혁신적으로 향상시키게 되었다.)
어떠한 DB환경에서도 훌륭한 연동프로그램을 구현할 수 있을 정도로 DB와의 연동이 쉽다.


Javascript 의 장점
자바로 한 번 작성된 프로그램은 자바를 지원하는 모든 플랫폼에서 실행 가능하다. 
 자바프로그래밍을 위해서는 Win95, 유닉스, 매킨토시 등 어느 환경에서라도 오직 한가지 API(Application Programming Interfaces) 패키지만 배우면 된다. 
 또한, 쓰레기 처리(garbage collection)나, 사용이 간편한 패키지는 프로그래머에게 좋은 프로그래밍 환경을 제공한다.
 자바는 규모가 작고 간단한 언어이면서도 매우 다양한 소프트웨어 애플리케이션 요건을 충족시킬 수 있을 만큼 포괄적이다. 
 자바는 피상적으로는 C나 C++과 유사하지만, 기존 언어의 기능들을 체계적으로 제거함으로써 단순성을 달성하였다. 
 따라서 자바를 이용해 작성한 애플리케이션은 C로 작성한 것과는 비교할 수 없을 만큼 크기가 매우 작다.
 자바 개발자들은 자바를 개발할 때 기본적인 틀이 되는 언어로 C++언어를 선정하였다.
  자바는 C++언어의 불합리한 점을 많은 부분에서 개선하였다. 결과적으로, 자바는 C++언어가 가지고 있는 객체지향적인 장점뿐만 아니라, 
  C++언어가 가지지 못하는 많은 장점을 가지게 되었다
